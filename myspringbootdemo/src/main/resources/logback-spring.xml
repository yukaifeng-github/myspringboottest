<?xml version="1.0" encoding="UTF-8"?>
<configuration>    
    <!-- -X号: X信息输出时左对齐； 
		%p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL, 
		%d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921 
		%r: 输出自应用启动到输出该log信息耗费的毫秒数 
		%c: 输出日志信息所属的类目，通常就是所在类的全名 
		%t: 输出产生该日志事件的线程名 
		%l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main (TestLog4.java:10) 
		%x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像Java servlets这样的多客户多线程的应用中。 
		%%: 输出一个”%”字符 
		%F: 输出日志消息产生时所在的文件名称 
		%L: 输出代码中的行号 
		%m: 输出代码中指定的消息,产生的日志具体信息 
		%n: 输出一个回车换行符，Windows平台为”\r\n”，Unix平台为”\n”输出日志信息换行 -->    
    <!-- appender是configuration的子节点，是负责写日志的组件。 -->
    <!-- ConsoleAppender：把日志输出到控制台 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">    
        <encoder>    
            <pattern>%d %p (%file\)- %m%n</pattern>  
            <!-- 控制台也要使用UTF-8，不要使用GBK，否则会中文乱码 -->
            <charset>UTF-8</charset>   
        </encoder>    
    </appender>    
    <!-- RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <!-- 以下的大概意思是：1.先按日期存日志，日期变了，将前一天的日志文件名重命名为XXX%日期%索引，新的日志仍然是datacleaning.log -->
    <!--             2.如果日期没有发生变化，但是当前日志的文件大小超过1KB时，对当前日志进行分割 重命名-->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">    
        <File>log/datacleaning.log</File>    
        <!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 -->
        <!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">    
            <!-- 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 -->
            <!-- 文件名：log/datacleaning.2018-11-26.0.log -->
            <fileNamePattern>log/datacleaning.%d.%i.log</fileNamePattern> 
            <!-- 每产生一个日志文件，该日志文件的保存期限为30天 --> 
            <maxHistory>30</maxHistory>   
            <timeBasedFileNamingAndTriggeringPolicy  class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">    
                <!-- maxFileSize:这是活动文件的大小，默认值是10MB，测试时可改成1KB看效果 -->  
                <maxFileSize>10MB</maxFileSize>    
            </timeBasedFileNamingAndTriggeringPolicy>    
        </rollingPolicy>    
        <encoder>    
            <!-- pattern节点，用来设置日志的输入格式 -->
            <pattern>    
                %d %p (%file:%line\)- %m%n  
            </pattern>    
            <!-- 记录日志的编码:此处设置字符集 - -->
            <charset>UTF-8</charset>
        </encoder>    
    </appender>    
    <!-- 控制台输出日志级别 -->
    <root level="INFO">    
        <appender-ref ref="STDOUT" />    
    </root>    
    <!-- 指定项目中某个包，当有日志操作行为时的日志记录级别 -->
    <!-- 级别依次为【从高到低】：FATAL > ERROR > WARN > INFO > DEBUG > TRACE  -->
    <logger name="com.kpmg" level="ERROR">    
        <appender-ref ref="FILE" />    
    </logger>  
    <logger name="org" level="ERROR">    
        <appender-ref ref="FILE" />    
    </logger>  
</configuration>  
